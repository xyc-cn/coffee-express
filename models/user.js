// Generated by CoffeeScript 1.7.1
(function() {
  module.exports = function(mongoose) {
    var User, UserScheme, async, crypto, deleteUser, login, register, registerCallback, update;
    crypto = require('crypto');
    async = require('async');
    UserScheme = new mongoose.Schema({
      email: {
        type: String,
        unique: true
      },
      account: {
        type: String,
        unique: true
      },
      password: {
        type: String
      }
    });
    User = mongoose.model('User', UserScheme);
    registerCallback = function(err) {
      if (err) {
        return console.log(err);
      }
      return console.log('new account added');
    };
    register = function(email, password, account, callback) {
      var shaSum, user;
      shaSum = crypto.createHash('sha256');
      shaSum.update(password);
      console.log('register' + email);
      user = new User({
        email: email,
        password: shaSum.digest('hex'),
        account: account
      });
      async.waterfall([
        function(cb) {
          return User.findOne({
            account: account
          }, function(err, doc) {
            if (doc) {
              return callback("has register");
            } else {
              return cb(err);
            }
          });
        }, function(err, cb) {
          user.save(registerCallback(err));
          return cb();
        }
      ], function() {
        return callback("success");
      });
    };
    login = function(account, password, callback) {
      return async.waterfall([
        function(cb) {
          var shaSum;
          shaSum = crypto.createHash('sha256');
          shaSum.update(password);
          return User.findOne({
            account: account,
            password: shaSum.digest('hex')
          }, function(err, doc) {
            return cb(err, doc);
          });
        }, function(doc, cb) {
          return cb(doc);
        }
      ], function(doc) {
        return callback(doc);
      });
    };
    update = function(account, password, callback) {
      var shaSum;
      shaSum = crypto.createHash('sha256');
      shaSum.update(password);
      console.log('update' + account);
      return async.waterfall([
        function(cb) {
          return User.update({
            account: account
          }, {
            $set: {
              password: shaSum.digest('hex')
            }
          }, {
            upsert: false
          }, function(err, doc) {
            console.log(err);
            return cb(err, doc);
          });
        }
      ], function(err, doc) {
        return callback(err, doc);
      });
    };
    deleteUser = function(account, callback) {
      return async.waterfall([
        function(cb) {
          return User.remove({
            account: account
          }, function(err, doc) {
            return cb(err, doc);
          });
        }
      ], function(err, doc) {
        return callback(err, doc);
      });
    };
    return {
      register: register,
      User: User,
      login: login,
      update: update,
      deleteUser: deleteUser
    };
  };

}).call(this);

//# sourceMappingURL=user.map
